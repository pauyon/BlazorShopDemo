@inject IProductService ProductService
@implements IDisposable

@foreach (var product in ProductService.Products)
{
    <div class="row">
        <div class="col-lg-2">
            <div class="text-center">
                <a href="/product/@product.Id">
                    <img class="zoom-hover img-fluid" src="@product.Image" alt="@product.Title" />
                </a>
            </div>
        </div>
        <div class="col-lg-10">
            <a href="/product/@product.Id">
                <h4 class="mb-0">@product.Title</h4>
            </a>
            <p>@product.Description</p>
            <h5 class="price">
                @GetPriceText(product)
            </h5>
        </div>
    </div>
}

@code {

    protected override void OnInitialized()
    {
        ProductService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.OnChange -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;

        if (variants.Count == 0) return string.Empty;
        if (variants.Count == 1) return $"${variants.First().Price}";

        decimal minPrice = variants.Min(v => v.Price);
        return $"Starting at ${minPrice}";
    }
}
