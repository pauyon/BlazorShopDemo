@page "/product/{Id:int}"
@inject IProductService ProductService
@inject ILocalStorageService LocalStorageService
@inject IToastService ToastService
@inject ICartService CartService

<div class="card shadow">
    <div class="card-body">
        <div class="row">
            <div class="col-lg-3">
                <div class="text-center">
                    <img class="img-fluid img-thumbnail" src="@_product.Image" alt="@_product.Title" />
                </div>
            </div>
            <div class="col-lg-7">
                <h3 class="mb-0">@_product.Title</h3>
                <p>@_product.Description</p>
                <div class="float-right">
                    <i class="oi oi-eye"></i> @GetViewString()
                </div>
            </div>
            <div class="col-lg-2">
                <div class="card shadow">
                    <div class="card-body">
                        @if (GetSelectedVariant() != null)
                        {
                            <div class="row">
                                <div class="col-lg-12 text-center">
                                    <h3 class="price">
                                        $@GetSelectedVariant().Price
                                    </h3>
                                    @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
                                    {
                                        <h6 class="text-muted original-price">$@GetSelectedVariant().OriginalPrice</h6>
                                    }
                                </div>
                            </div>
                        }
                        @if (_product.Variants != null && _product.Variants.Count > 1)
                        {
                            <label>Edition:</label>
                            <select class="form-select" @bind="_currentEditionId">
                                @foreach (var variant in _product.Variants)
                                {
                                    <option value="@variant.EditionId">@variant.Edition.Name</option>
                                }
                            </select>
                        }

                        <EditForm Model="_cartItem">
                            <div class="form-group">
                                <label>Qty:</label>
                                <InputNumber id="quanity" @bind-Value="_cartItem.Quantity" class="form-control"/>
                            </div>
                        </EditForm>

                        <div class="mt-3">
                            <button class="btn btn-primary form-control" @onclick="AddToCart"><i class="oi oi-cart"></i>&nbsp; Add to Cart</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private CartItem _cartItem = new CartItem { Quantity = 1 };
    private Product _product = new Product();
    private int _currentEditionId = 1;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _product = await ProductService.GetProduct(Id);

        if (_product.Variants.Any())
        {
            _currentEditionId = _product.Variants.First().EditionId;
        }
    }

    private ProductVariant GetSelectedVariant()
    {
        return _product.Variants.FirstOrDefault(v => v.EditionId == _currentEditionId);
    }

    private async Task AddToCart()
    {
        var productVariant = GetSelectedVariant();

        _cartItem.EditionId = productVariant.EditionId;
        _cartItem.EditionName = productVariant.Edition.Name;
        _cartItem.Image = _product.Image;
        _cartItem.Price = productVariant.Price;
        _cartItem.ProductId = productVariant.ProductId;
        _cartItem.ProductTitle = _product.Title;

        await CartService.AddToCart(_cartItem);
    }

    private string GetViewString()
    {
        if (_product.Views > 1000000) return $"{((float)_product.Views / 1000000).ToString("#.##")}M";
        if (_product.Views > 100000) return $"{((float)_product.Views / 10000).ToString("#.##")}K";
        if (_product.Views > 1000) return $"{((float)_product.Views / 1000).ToString("#.##")}K";
        return @_product.Views.ToString("0##");
    }
}
