@inject IProductService ProductService
@implements IDisposable

<div class="row">
    <div class="col-lg-12">
        <div class="product-card-wrapper text-center">
            @foreach (var product in ProductService.Products)
            {
                <div class="card shadow" style="height: 30rem; width: 20rem;">
                    <div class="product-card-img-wrapper">
                        <a href="/product/@product.Id">
                            <img class="img-fluid zoom-hover" src="@product.Image" alt="@product.Title">
                        </a>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">@product.Title</h5>
                        <p class="card-text">
                            <h5 class="price">
                                @GetPriceText(product)
                            </h5>
                        </p>
                        <a href="/product/@product.Id">
                            <button class="btn btn-primary">View</button>
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {

    protected override void OnInitialized()
    {
        ProductService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.OnChange -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;

        if (variants.Count == 0) return string.Empty;
        if (variants.Count == 1) return $"${variants.First().Price}";

        decimal minPrice = variants.Min(v => v.Price);
        return $"Starting at ${minPrice}";
    }
}
